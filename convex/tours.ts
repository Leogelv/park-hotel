import { v } from "convex/values";
import { mutation, query } from "./_generated/server";
import { Doc, Id } from "./_generated/dataModel";

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç—É—Ä—ã
export const getAllTours = query({
  args: { 
    onlyActive: v.optional(v.boolean()),
    region: v.optional(v.string())
  },
  handler: async (ctx, args) => {
    let query;
    
    if (args.onlyActive) {
      query = ctx.db.query("tours").withIndex("by_active", q => q.eq("is_active", true));
    } else {
      query = ctx.db.query("tours");
    }
    
    const tours = await query.collect();
    
    if (args.region) {
      return tours.filter(tour => tour.region === args.region);
    }
    
    return tours;
  },
});

// –ü–æ–ª—É—á–∏—Ç—å —Ç—É—Ä –ø–æ ID
export const getTourById = query({
  args: { id: v.id("tours") },
  handler: async (ctx, args) => {
    return await ctx.db.get(args.id);
  },
});

// –ü–æ–ª—É—á–∏—Ç—å —Ç—É—Ä —Å –¥–Ω—è–º–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
export const getTourWithDetails = query({
  args: { tourId: v.id("tours") },
  handler: async (ctx, { tourId }) => {
    const tour = await ctx.db.get(tourId);
    if (!tour) return null;

    // –ü–æ–ª—É—á–∞–µ–º –¥–Ω–∏ —Ç—É—Ä–∞
    const days = await ctx.db
      .query("tour_days")
      .withIndex("by_tour", (q) => q.eq("tour_id", tourId))
      .collect();

    if (days.length === 0) {
      return {
        ...tour,
        days: [],
        availability: []
      };
    }

    // –ü–æ–ª—É—á–∞–µ–º –í–°–ï –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö –¥–Ω–µ–π —Ç—É—Ä–∞ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    const dayIds = days.map(d => d._id);
    const allActivities = await ctx.db
      .query("activities")
      .collect();
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ –Ω–∞—à–∏–º –¥–Ω—è–º
    const tourActivities = allActivities.filter(activity => 
      dayIds.includes(activity.tour_day_id)
    );

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º
    const activitiesByDay = tourActivities.reduce((acc, activity) => {
      const dayId = activity.tour_day_id;
      if (!acc[dayId]) acc[dayId] = [];
      acc[dayId].push(activity);
      return acc;
    }, {} as Record<string, typeof tourActivities>);

    // –°–æ–±–∏—Ä–∞–µ–º –¥–Ω–∏ —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏
    const daysWithActivities = days
      .sort((a, b) => a.day_number - b.day_number)
      .map(day => ({
        ...day,
        activities: (activitiesByDay[day._id] || [])
          .sort((a, b) => a.order_number - b.order_number)
      }));

    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã
    const availability = await ctx.db
      .query("availability")
      .withIndex("by_tour", (q) => q.eq("tour_id", tourId))
      .collect();

    return {
      ...tour,
      days: daysWithActivities,
      availability: availability.filter(a => a.start_date > Date.now())
        .sort((a, b) => a.start_date - b.start_date)
    };
  },
});

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç—É—Ä (–ø–æ–ª–Ω–∞—è —Å—Ö–µ–º–∞ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏)
export const createTour = mutation({
  args: {
    title: v.string(),
    description: v.string(),
    region: v.string(),
    duration_days: v.number(),
    price: v.float64(),
    discount_percent: v.optional(v.number()),
    max_participants: v.number(),
    difficulty_level: v.string(),
    included_services: v.optional(v.array(v.string())),
    excluded_services: v.optional(v.array(v.string())),
    extra_services: v.optional(v.array(v.object({
      name: v.string(),
      price: v.float64()
    }))),
    days: v.optional(v.array(v.object({
      day_number: v.number(),
      accommodation: v.optional(v.string()),
      auto_distance_km: v.optional(v.number()),
      walk_distance_km: v.optional(v.number()),
      activities: v.array(v.object({
        name: v.string(),
        description: v.string(),
        type: v.string(),
        time_start: v.optional(v.string()),
        time_end: v.optional(v.string()),
        price: v.optional(v.number()),
        order_number: v.number(),
        is_included: v.boolean(),
        image: v.optional(v.string())
      }))
    }))),
    main_image: v.optional(v.string()),
    gallery_images: v.optional(v.array(v.string())),
    is_active: v.optional(v.boolean())
  },
  handler: async (ctx, args) => {
    const now = Date.now();
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–Ω–∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const { days, ...tourData } = args;
    
    // –°–æ–∑–¥–∞–µ–º —Ç—É—Ä
    const tourId = await ctx.db.insert("tours", {
      ...tourData,
      included_services: args.included_services || [],
      excluded_services: [],
      gallery_images: args.gallery_images || [],
      is_active: args.is_active ?? true,
      created_at: now,
      updated_at: now
    });
    
    // –°–æ–∑–¥–∞–µ–º –¥–Ω–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if (days && days.length > 0) {
      for (const day of days) {
        const { activities, ...dayData } = day;
        
        // –°–æ–∑–¥–∞–µ–º –¥–µ–Ω—å
        const dayId = await ctx.db.insert("tour_days", {
          tour_id: tourId,
          ...dayData,
          created_at: now,
          updated_at: now
        });
        
        // –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–Ω—è
        for (const activity of activities) {
          await ctx.db.insert("activities", {
            tour_day_id: dayId,
            ...activity,
            created_at: now,
            updated_at: now
          });
        }
      }
    }
    
    return tourId;
  },
});

// –û–±–Ω–æ–≤–∏—Ç—å —Ç—É—Ä (–ø–æ–ª–Ω–∞—è —Å—Ö–µ–º–∞ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏)
export const updateTour = mutation({
  args: {
    id: v.id("tours"),
    title: v.optional(v.string()),
    description: v.optional(v.string()),
    region: v.optional(v.string()),
    duration_days: v.optional(v.number()),
    price: v.optional(v.float64()),
    discount_percent: v.optional(v.number()),
    max_participants: v.optional(v.number()),
    difficulty_level: v.optional(v.string()),
    included_services: v.optional(v.array(v.string())),
    excluded_services: v.optional(v.array(v.string())),
    extra_services: v.optional(v.array(v.object({
      name: v.string(),
      price: v.float64()
    }))),
    days: v.optional(v.array(v.object({
      _id: v.optional(v.id("tour_days")),
      day_number: v.number(),
      accommodation: v.optional(v.string()),
      auto_distance_km: v.optional(v.number()),
      walk_distance_km: v.optional(v.number()),
      activities: v.array(v.object({
        _id: v.optional(v.id("activities")),
        name: v.string(),
        description: v.string(),
        type: v.string(),
        time_start: v.optional(v.string()),
        time_end: v.optional(v.string()),
        price: v.optional(v.number()),
        order_number: v.number(),
        is_included: v.boolean(),
        image: v.optional(v.string())
      }))
    }))),
    main_image: v.optional(v.string()),
    gallery_images: v.optional(v.array(v.string())),
    is_active: v.optional(v.boolean())
  },
  handler: async (ctx, args) => {
    // –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: —Å–º–æ—Ç—Ä–∏–º —á—Ç–æ –ø—Ä–∏—à–ª–æ
    console.log('üî•üî•üî• updateTour –ø–æ–ª—É—á–∏–ª args:', args);
    console.log('üî•üî•üî• –µ—Å—Ç—å –ª–∏ extra_services:', args.extra_services);
    
    const { id, days, ...updates } = args;
    
    // –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: —á—Ç–æ –≤ updates
    console.log('üî•üî•üî• updates —Å–æ–¥–µ—Ä–∂–∏—Ç:', updates);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–∞
    const tour = await ctx.db.get(id);
    if (!tour) {
      console.log(`Tour with id ${id} not found, skipping update`);
      return id;
    }
    
    // –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: —á—Ç–æ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–∏—Å–∞—Ç—å –≤ –ë–î
    console.log('üî•üî•üî• –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–∏—Å–∞—Ç—å –≤ –ë–î:', {
      ...updates,
      updated_at: Date.now()
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç—É—Ä–∞
    await ctx.db.patch(id, {
      ...updates,
      updated_at: Date.now()
    });
    
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–Ω–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
    if (days !== undefined) {
      // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–Ω–∏
      const existingDays = await ctx.db
        .query("tour_days")
        .withIndex("by_tour", q => q.eq("tour_id", id))
        .collect();
      
      // –£–¥–∞–ª—è–µ–º –¥–Ω–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –Ω–æ–≤–æ–º —Å–ø–∏—Å–∫–µ
      const newDayIds = new Set(days.map(d => d._id).filter(id => id));
      for (const existingDay of existingDays) {
        if (!newDayIds.has(existingDay._id)) {
          // –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–Ω—è
          const activities = await ctx.db
            .query("activities")
            .withIndex("by_order", q => q.eq("tour_day_id", existingDay._id))
            .collect();
          
          for (const activity of activities) {
            await ctx.db.delete(activity._id);
          }
          
          // –£–¥–∞–ª—è–µ–º –¥–µ–Ω—å
          await ctx.db.delete(existingDay._id);
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–Ω–∏
      for (const day of days) {
        const { _id: dayId, activities, ...dayData } = day;
        const now = Date.now();
        
        let actualDayId: Id<"tour_days">;
        
        if (dayId) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–µ–Ω—å
          await ctx.db.patch(dayId, {
            ...dayData,
            updated_at: now
          });
          actualDayId = dayId;
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–µ–Ω—å
          actualDayId = await ctx.db.insert("tour_days", {
            tour_id: id,
            ...dayData,
            created_at: now,
            updated_at: now
          });
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        if (activities) {
          // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
          const existingActivities = await ctx.db
            .query("activities")
            .withIndex("by_order", q => q.eq("tour_day_id", actualDayId))
            .collect();
          
          // –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –Ω–æ–≤–æ–º —Å–ø–∏—Å–∫–µ
          const newActivityIds = new Set(activities.map(a => a._id).filter(id => id));
          for (const existingActivity of existingActivities) {
            if (!newActivityIds.has(existingActivity._id)) {
              await ctx.db.delete(existingActivity._id);
            }
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
          for (const activity of activities) {
            const { _id: activityId, ...activityData } = activity;
            
            if (activityId) {
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
              await ctx.db.patch(activityId, {
                ...activityData,
                updated_at: now
              });
            } else {
              // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
              await ctx.db.insert("activities", {
                tour_day_id: actualDayId,
                ...activityData,
                created_at: now,
                updated_at: now
              });
            }
          }
        }
      }
    }
    
    return id;
  },
});

// –£–¥–∞–ª–∏—Ç—å —Ç—É—Ä
export const deleteTour = mutation({
  args: { id: v.id("tours") },
  handler: async (ctx, args) => {
    // –£–¥–∞–ª—è–µ–º –¥–Ω–∏ —Ç—É—Ä–∞
    const days = await ctx.db
      .query("tour_days")
      .withIndex("by_tour", q => q.eq("tour_id", args.id))
      .collect();
    
    for (const day of days) {
      // –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–Ω—è
      const activities = await ctx.db
        .query("activities")
        .withIndex("by_order", q => q.eq("tour_day_id", day._id))
        .collect();
      
      for (const activity of activities) {
        await ctx.db.delete(activity._id);
      }
      
      await ctx.db.delete(day._id);
    }
    
    // –£–¥–∞–ª—è–µ–º —Ç—É—Ä
    await ctx.db.delete(args.id);
  },
});

// –ü–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã
export const getUniqueRegions = query({
  handler: async (ctx) => {
    const tours = await ctx.db.query("tours").collect();
    const regions = [...new Set(tours.map(tour => tour.region))];
    return regions;
  },
});

// –ü–∞–∫–µ—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–∞ (–∑–∞–º–µ–Ω—è–µ—Ç autoSaveTourField)
export const updateTourDraft = mutation({
  args: {
    id: v.id("tours"),
    updates: v.object({
      title: v.optional(v.string()),
      description: v.optional(v.string()),
      region: v.optional(v.string()),
      price: v.optional(v.float64()),
      discount_percent: v.optional(v.float64()),
      duration_days: v.optional(v.number()),
      max_participants: v.optional(v.number()),
      difficulty_level: v.optional(v.string()),
      is_active: v.optional(v.boolean()),
      main_image: v.optional(v.string()),
      included_services: v.optional(v.array(v.string())),
    })
  },
  handler: async (ctx, args) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    const tour = await ctx.db.get(args.id);
    if (!tour) {
      console.log(`Tour with id ${args.id} not found, skipping update`);
      return args.id;
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º undefined –∑–Ω–∞—á–µ–Ω–∏—è
    const filteredUpdates = Object.fromEntries(
      Object.entries(args.updates).filter(([_, value]) => value !== undefined)
    );
    
    if (Object.keys(filteredUpdates).length === 0) {
      return args.id; // –ù–µ—á–µ–≥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
    }
    
    await ctx.db.patch(args.id, {
      ...filteredUpdates,
      updated_at: Date.now()
    });
    
    console.log(`Updated tour ${args.id} with fields: ${Object.keys(filteredUpdates).join(', ')}`);
    return args.id;
  },
});

// –£—Å—Ç–∞—Ä–µ–≤—à–∞—è –º—É—Ç–∞—Ü–∏—è - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const autoSaveTourField = mutation({
  args: {
    id: v.id("tours"),
    field: v.string(),
    value: v.any()
  },
  handler: async (ctx, args) => {
    console.log(`‚ö†Ô∏è autoSaveTourField is deprecated, use updateTourDraft instead`);
    
    // –ú–∞–ø–ø–∏–º —Å—Ç–∞—Ä—ã–µ –≤—ã–∑–æ–≤—ã –Ω–∞ –Ω–æ–≤—É—é –º—É—Ç–∞—Ü–∏—é
    const updates: Record<string, any> = {};
    
    const supportedFields = ['title', 'description', 'region', 'price', 'discount_percent', 
                           'duration_days', 'max_participants', 'difficulty_level', 'is_active', 'main_image', 'included_services'];
    
    if (supportedFields.includes(args.field)) {
      updates[args.field] = args.value;
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –º—É—Ç–∞—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
      const tour = await ctx.db.get(args.id);
      if (tour) {
        await ctx.db.patch(args.id, {
          [args.field]: args.value,
          updated_at: Date.now()
        });
      }
      return args.id;
    }
    
    return args.id;
  },
});

// –°–æ–∑–¥–∞—Ç—å –¥–µ–Ω—å —Ç—É—Ä–∞
export const createTourDay = mutation({
  args: {
    tour_id: v.id("tours"),
    day_number: v.number(),
    accommodation: v.optional(v.string()),
    auto_distance_km: v.optional(v.number()),
    walk_distance_km: v.optional(v.number()),
    created_at: v.number(),
    updated_at: v.number()
  },
  handler: async (ctx, args) => {
    return await ctx.db.insert("tour_days", args);
  },
});

// –°–æ–∑–¥–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
export const createActivity = mutation({
  args: {
    tour_day_id: v.id("tour_days"),
    name: v.string(),
    description: v.string(),
    image: v.optional(v.string()),
    type: v.string(),
    time_start: v.optional(v.string()),
    time_end: v.optional(v.string()),
    price: v.optional(v.number()),
    order_number: v.number(),
    is_included: v.boolean(),
    created_at: v.number(),
    updated_at: v.number()
  },
  handler: async (ctx, args) => {
    return await ctx.db.insert("activities", args);
  },
});