#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥ –¥–ª—è Convex
const CONVEX_URL = 'https://convex-backend-production-587a.up.railway.app';
const ADMIN_KEY = 'self-hosted-convex|014dd603afe27576459853d9b6acffe0c8be4cf0aa532a2398b33fd3df705e63f4b0e14146';

// –ü—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
const imagesPath = '/Users/gelvihleonid/Documents/clients/chigish/rooms';
const images = [
  { file: '1 5.jpg', name: '–†–æ—Å–∫–æ—à–Ω—ã–π –Ω–æ–º–µ—Ä –õ—é–∫—Å' },
  { file: 'IMG_1006 1.jpg', name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å –≤–∏–¥–æ–º –Ω–∞ –≥–æ—Ä—ã' }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Convex —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
async function uploadImage(imagePath, filename) {
  try {
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    const imageBuffer = fs.readFileSync(imagePath);
    
    // Step 1: –ü–æ–ª—É—á–∞–µ–º upload URL —á–µ—Ä–µ–∑ mutation
    const uploadUrlResponse = await fetch(`${CONVEX_URL}/api/mutation`, {
      method: 'POST',
      headers: {
        'Authorization': `Convex ${ADMIN_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        path: 'files:generateUploadUrl',
        args: {},
        format: 'json'
      })
    });
    
    if (!uploadUrlResponse.ok) {
      const errorText = await uploadUrlResponse.text();
      throw new Error(`Failed to get upload URL: ${uploadUrlResponse.statusText} - ${errorText}`);
    }
    
    const uploadUrlResult = await uploadUrlResponse.json();
    
    if (uploadUrlResult.status !== 'success') {
      throw new Error(`Upload URL generation failed: ${uploadUrlResult.errorMessage}`);
    }
    
    const postUrl = uploadUrlResult.value;
    console.log(`üì§ Got upload URL for ${filename}`);
    
    // Step 2: POST —Ñ–∞–π–ª –Ω–∞ upload URL
    const uploadResponse = await fetch(postUrl, {
      method: 'POST',
      headers: { 
        'Content-Type': 'image/jpeg' 
      },
      body: imageBuffer
    });
    
    if (!uploadResponse.ok) {
      const errorText = await uploadResponse.text();
      throw new Error(`Failed to upload image: ${uploadResponse.statusText} - ${errorText}`);
    }
    
    const result = await uploadResponse.json();
    const storageId = result.storageId;
    
    console.log(`‚úÖ Uploaded ${filename} -> ${storageId}`);
    return storageId;
    
  } catch (error) {
    console.error(`‚ùå Error uploading ${filename}:`, error.message);
    return null;
  }
}

// Step 3: –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º storageId –≤ –ë–î)
async function createSpaceWithImage(spaceData, imageIds) {
  try {
    const response = await fetch(`${CONVEX_URL}/api/mutation`, {
      method: 'POST',
      headers: {
        'Authorization': `Convex ${ADMIN_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        path: 'uploadImages:createSpaceWithImages',
        args: { ...spaceData, imageIds },
        format: 'json'
      })
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Failed to create space: ${response.statusText} - ${errorText}`);
    }
    
    const result = await response.json();
    
    if (result.status !== 'success') {
      throw new Error(`Space creation failed: ${result.errorMessage}`);
    }
    
    console.log(`‚úÖ Created space: ${spaceData.name} with ${imageIds.length} images`);
    return result.value;
    
  } catch (error) {
    console.error(`‚ùå Error creating space:`, error.message);
    return null;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üöÄ Starting image upload and space creation...\n');
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const uploadedImages = [];
  
  for (const image of images) {
    const imagePath = path.join(imagesPath, image.file);
    
    if (!fs.existsSync(imagePath)) {
      console.log(`‚ö†Ô∏è  File not found: ${imagePath}`);
      continue;
    }
    
    const storageId = await uploadImage(imagePath, image.file);
    if (storageId) {
      uploadedImages.push({ ...image, storageId });
    }
  }
  
  console.log(`\nüì∏ Uploaded ${uploadedImages.length} images\n`);
  
  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
  const spacesData = [
    {
      name: "–†–æ—Å–∫–æ—à–Ω—ã–π –Ω–æ–º–µ—Ä –õ—é–∫—Å",
      description: "–ü—Ä–æ—Å—Ç–æ—Ä–Ω—ã–π –ª—é–∫—Å —Å –ø–∞–Ω–æ—Ä–∞–º–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏ –∏ –≤–∏–¥–æ–º –Ω–∞ –≥–æ—Ä—ã. –û—Å–Ω–∞—â–µ–Ω –≤—Å–µ–º–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —É–¥–æ–±—Å—Ç–≤–∞–º–∏ –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è.",
      capacity: 2,
      area_sqm: 45.5,
      floor: 3,
      amenities: [
        "–ü–∞–Ω–æ—Ä–∞–º–Ω—ã–µ –æ–∫–Ω–∞",
        "–ú–∏–Ω–∏-–±–∞—Ä",
        "–ö–æ—Ñ–µ–º–∞—à–∏–Ω–∞",
        "Smart TV",
        "–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä",
        "–°–µ–π—Ñ",
        "–ë–∞–ª–∫–æ–Ω —Å –≤–∏–¥–æ–º –Ω–∞ –≥–æ—Ä—ã",
        "–•–∞–ª–∞—Ç—ã –∏ —Ç–∞–ø–æ—á–∫–∏"
      ],
      room_type: "suite",
      price_per_night: 8500
    },
    {
      name: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ö–æ–º—Ñ–æ—Ä—Ç",
      description: "–£—é—Ç–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º –∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–º –≤–∏–¥–æ–º. –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –ø–∞—Ä—ã –∏–ª–∏ –¥–µ–ª–æ–≤—ã—Ö –ø–æ–µ–∑–¥–æ–∫.",
      capacity: 2,
      area_sqm: 28.0,
      floor: 2,
      amenities: [
        "–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä",
        "–¢–í",
        "–ú–∏–Ω–∏-—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫",
        "–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª",
        "–î—É—à–µ–≤–∞—è –∫–∞–±–∏–Ω–∞",
        "–§–µ–Ω",
        "Wi-Fi",
        "–°–µ–π—Ñ"
      ],
      room_type: "standard",
      price_per_night: 4200
    }
  ];
  
  for (let i = 0; i < spacesData.length && i < uploadedImages.length; i++) {
    const spaceData = spacesData[i];
    const imageData = uploadedImages[i];
    
    await createSpaceWithImage(spaceData, [imageData.storageId]);
  }
  
  console.log('\nüéâ All done! Check your Convex dashboard.');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
main().catch(console.error);